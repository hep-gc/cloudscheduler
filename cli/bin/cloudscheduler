#!/usr/bin/env python3
"""
This is the command line interface to cloudscheduler version 2.
"""

from pathlib import Path
from csv2_common import command_hash, decode, requests, requests_no_credentials_error, update_pid_defaults, yaml_full_load

import os
import platform
import sys

import yaml
import json

import csv2_accounting
import csv2_alias
import csv2_cloud
import csv2_defaults
import csv2_ec2
import csv2_group
import csv2_help
import csv2_helpers
import csv2_metadata
import csv2_my
import csv2_job
import csv2_server
import csv2_user
import csv2_vm
import csv2_images

from subprocess import Popen, PIPE

def main(args):
    """
    Determine object type and call handler.
    """

#       'ca_cert': '%s/lets-encrypt-x3-cross-signed.pem.txt' % os.path.dirname(os.path.abspath(args[0])),

    # Initialize global variables.
    gvar = {
        'active_group': '-',
        'action': None,
        'actions': {
            'accounting': [
                False, # super_user?
                {
                    'apel':                               csv2_accounting.apel,
                    }
                ],
            'alias': [
                False, # super_user?
                {
                    'add':                                csv2_alias.add,
                    'list':                               csv2_alias.list,
                    'update':                             csv2_alias.update,
                    'delete':                             csv2_alias.delete,
                    }
                ],
            'cloud': [
                False, # super_user?
                {
                    'add':                                csv2_cloud.add,
                    'delete':                             csv2_cloud.delete,
                    'list':                               csv2_cloud.list,
                    'status':                             csv2_cloud.status,
                    'update':                             csv2_cloud.update,
                    'metadata-collation':                 csv2_cloud.metadata_collation,
                    'metadata-delete':                    csv2_cloud.metadata_delete,
                    'metadata-edit':                      csv2_cloud.metadata_edit,
                    'metadata-list':                      csv2_cloud.metadata_list,
                    'metadata-load':                      csv2_cloud.metadata_load,
                    'metadata-update':                    csv2_cloud.metadata_update,
                    'metadata-save':                      csv2_cloud.metadata_save,
                    }
                ],
            'defaults': [
                False, # super_user?
                {
                    'delete':                             csv2_defaults.delete,
                    'list':                               csv2_defaults.list,
                    'set':                                csv2_defaults.set,
                    }
                ],
            'ec2': [
                False, # super_user?
                {
                    'images':                             csv2_ec2.images,
                    'instance-types':                     csv2_ec2.instance_types,
                    }
                ],
            'group': [
                True, # super_user?
                {
                    'add':                                csv2_group.add,
                    'defaults':                           csv2_group.defaults,
                    'delete':                             csv2_group.delete,
                    'list':                               csv2_group.list,
                    'update':                             csv2_group.update,
                    'metadata-delete':                    csv2_group.metadata_delete,
                    'metadata-edit':                      csv2_group.metadata_edit,
                    'metadata-list':                      csv2_group.metadata_list,
                    'metadata-load':                      csv2_group.metadata_load,
                    'metadata-update':                    csv2_group.metadata_update,
                    'metadata-save':                      csv2_group.metadata_save,
                    }
                ],
            'helpers': [
                False, # super_user?
                {
                    'check_documentation':                csv2_helpers.check_documentation,
                    'generate_bash_completion_script':    csv2_helpers.generate_bash_completion_script,
                    'print_json_syntax_tree':             csv2_helpers.print_json_syntax_tree,
                    }
                ],
            'job': [
                False, # super_user?
                {
                    'list':                               csv2_job.list,
                    }
                ],
            'metadata': [
                False, # super_user?
                {
                    'backup':                             csv2_metadata.backup,
                    'delete':                             csv2_metadata.delete,
                    'edit':                               csv2_metadata.edit,
                    'group-defaults':                     csv2_metadata.group,
                    'list':                               csv2_metadata.list,
                    'load':                               csv2_metadata.load,
                    'restore':                            csv2_metadata.restore,
                    'update':                             csv2_metadata.update,
                    }
                ],
            'my': [
                False, # super_user?
                {
                    'settings':                           csv2_my.settings,
                    }
                ],
            'server': [
                True, # super_user?
                {
                    'config':                             csv2_server.config,
                }
            ],
            'user': [
                True, # super_user?
                {
                    'add':                                csv2_user.add,
                    'delete':                             csv2_user.delete,
                    'list':                               csv2_user.list,
                    'update':                             csv2_user.update,
                    }
                ],
            'vm': [
                False, # super_user?
                {
                    'list':                               csv2_vm.list,
                    'update':                             csv2_vm.update,
                    }
                ],
            'image': [
                False, # super_user?
                {
                    'transfer':                           csv2_images.transfer,
                    'upload':                             csv2_images.upload,
                    'delete':                             csv2_images.delete,
                    'list':                               csv2_images.list,
                    }
               ]

            },
        'command_keys': (
            # short_name, long_name, key_value(T)/boolean(F)
            ('-a',    '--all', False),
            ('-an',   '--alias-name', True),
            ('-bk',   '--backup-key', True),
            ('-br',   '--backup-repository', True),
            ('-c',    '--cacerts', True),
            ('-ca',   '--cloud-address', True),
            ('-cc',   '--config-category', True),
            ('-ckv',  '--config-key-values', True),
            ('-ce',   '--cloud-enabled', True),
            ('-cfe',  '--cloud-flavor-exclusion', True),
            ('-cfo',  '--cloud-flavor-option', True),
            ('-cn',   '--cloud-name', True),
            ('-co',   '--cloud-option', True),
            ('-cpw',  '--cloud-password', True),
            ('-cp',   '--cloud-priority', True),
            ('-cP',   '--cloud-project', True),
            ('-cPD',  '--cloud-project-domain', True),
            ('-cPI',  '--cloud-project-domain-id', True),
            ('-cr',   '--cloud-region', True),
            ('-CSV',  '--comma-separated-values', True),
            ('-CSEP', '--comma-separated-values-separator', True),
            ('-csp',  '--cloud-spot-price', True),
            ('-ct',   '--cloud-type', True),
            ('-cUD',  '--cloud-user-domain', True),
            ('-cUI',  '--cloud-user-domain-id', True),
            ('-cU',   '--cloud-user', True),
            ('-cac',  '--cloud-app-credentials', True),
            ('-cas',  '--cloud-app-credentials-secret', True),
            ('-ds',   '--default-server', False),   #### special case in _args() ###
            ('-f',    '--file-path', True),
            ('-F',    '--force', False),
            ('-g',    '--group', True),
            ('-gme',  '--group-metadata-exclusion', True),
            ('-gmo',  '--group-metadata-option', True),
            ('-gn',   '--group-name', True),
            ('-go',   '--group-option', True),
            ('-H',    '--long-help', False),
            ('-h',    '--help', False),
            ('-htcf', '--htcondor-fqdn', True),
            ('-htch', '--htcondor-container-hostname', True),
            ('-htcu', '--htcondor-users', True),
            ('-ia',   '--ec2-image-architectures', True),
            ('-il',   '--ec2-image-like', True),
            ('-inl',  '--ec2-image-not-like', True),
            ('-ioa',  '--ec2-image-owner-aliases', True),
            ('-ioi',  '--ec2-image-owner-ids', True),
            ('-ios',  '--ec2-image-operating-systems', True),
            ('-itc',  '--ec2-instance-type-cores', True),
            ('-itf',  '--ec2-instance-type-families', True),
            ('-itmn', '--ec2-instance-type-memory-min-gigabytes-per-core', True),
            ('-itmx', '--ec2-instance-type-memory-max-gigabytes-per-core', True),
            ('-itos', '--ec2-instance-type-operating-systems', True),
            ('-itp',  '--ec2-instance-type-processors', True),
            ('-itpm', '--ec2-instance-type-processor-manufacturers', True),
            ('-jc',   '--job-cores', True),
            ('-jd',   '--job-disk', True),
            ('-jh',   '--job-hold', True),
            ('-jI',   '--job-id', True),
            ('-ji',   '--job-image', True),
            ('-jp',   '--job-priority', True),
            ('-jR',   '--job-requirements', True),
            ('-jr',   '--job-ram', True),
            ('-jrc',  '--job-request-cpus', True),
            ('-jrd',  '--job-request-disk', True),
            ('-jrr',  '--job-request-ram', True),
            ('-jrs',  '--job-request-swap', True),
            ('-jS',   '--job-status', True),
            ('-js',   '--job-swap', True),
            ('-jta',  '--job-target-alias', True),
            ('-ju',   '--job-user', True),
            ('-lu',   '--last-update', True),
            ('-me',   '--metadata-enabled', True),
            ('-mmt',  '--metadata-mime-type', True),
            ('-mn',   '--metadata-name', True),
            ('-mp',   '--metadata-priority', True),
            ('-nld',  '--no-limit-default', True),
            ('-NV',   '--no-view', False),
            ('-ok',   '--only-keys', False),
            ('-r',    '--rotate', False),
            ('-s',    '--server', True),
            ('-sa',   '--server-address', True),
#           ('-sgc',  '--server-grid-cert', True),
#           ('-sgk',  '--server-grid-key', True),
            ('-spw',  '--server-password', True),
            ('-sfv',  '--show-foreign-vms', True),
            ('-sgs',  '--show-global-status', True),
            ('-sjta', '--show-jobs-by-target-alias', True),
            ('-sri',  '--status-refresh-interval', True),
            ('-ssd',  '--show-slot-detail', True),
            ('-ssf',  '--show-slot-flavors', True),
            ('-SU',   '--super-user', True),
            ('-su',   '--server-user', True),
            ('-te',   '--text-editor', True),
            ('-ui',   '--user-id', True),
            ('-ucn',  '--user-common-name', True),
            ('-un',   '--username', True),
            ('-uo',   '--user-option', True),
            ('-upw',  '--user-password', True),
            ('-v',    '--version', False),
            ('-V',    '--view', True),
            ('-vbv',  '--vm-boot-volume', True),
            ('-VC',   '--view-columns', False),
            ('-vc',   '--vm-cores', True),
            ('-vcs',   '--vm-cores-softmax', True),
            ('-vd',   '--vm-disk', True),
            ('-vF',   '--vm-foreign', True),
            ('-vf',   '--vm-flavor', True),
            ('-vi',   '--vm-image', True),
            ('-vh',   '--vm-hosts', True),
            ('-vk',   '--vm-keyname', True),
            ('-vka',  '--vm-keep-alive', True),
            ('-vn',   '--vm-network', True),
            ('-vo',   '--vm-option', True),
            ('-vr',   '--vm-ram', True),
            ('-vS',   '--vm-status', True),
            ('-vs',   '--vm-swap', True),
            ('-vsg',  '--vm-security-groups', True),
            ('-w',    '--with', True),
            ('-x509', '--use-x509-authentication', False),
            ('-xA',   '--expose-API', False),
            ('-Y',    '--yes', False),
            ('-in',   '--image-name', True),
            ('-ic',   '--image-checksum', True),
            ('-tc',   '--target-cloud', True),
            ('-tg',   '--target-group', True),
            ('-ip',   '--image-path', True),
            ('-cl',   '--cloud-list', True),
            ('-iu',   '--image-format', True),
            ('-id',   '--image-date', True),
            ('-ii',   '--image-index', True),
            ('-df',   '--disk-format', True)
        ),
        'command_dir': os.path.dirname(os.path.realpath(args[0])),
        'command_name': os.path.basename(args[0]),
        'cookies': dict(),
        'csrf': None,
        'function_args': None,
        'home_dir': str(Path.home()),
        'object': None,
        'platform': decode(platform.platform(terse=1)),
        'retrieve_options': False,
        'tables_shown': 0,
        'uid': os.getuid(),
        }
    
    # Ensure the bash completion script is up to date.
    if os.path.isfile('%s/.bash_completion.d/cloudscheduler' % gvar['home_dir']):
        with open('%s/.bash_completion.d/cloudscheduler' % gvar['home_dir']) as fd:
            md5sum = fd.read().split()[1]
            if md5sum != command_hash(gvar):
                csv2_helpers.generate_bash_completion_script(gvar)
    else:
        csv2_helpers.generate_bash_completion_script(gvar)

    # Check for interactive parent process and set the pid_file path.
    if sys.stdout.isatty():
        gvar['pid_file'] = '/tmp/.csv2_%s' % os.getppid()
    else:
        gvar['pid_file'] = '-'

#   if os.readlink('/proc/%s/fd/0' % os.getppid()).split(':')[0] == 'pipe':
#       gvar['pid_file'] = '-'
#   else:
#       gvar['pid_file'] = '/tmp/.csv2_%s' % os.getppid()

#   # Check for authentication by grid proxy certificate.
#   if os.path.isfile('/tmp/x509up_u%s' % gvar['uid']):
#       gvar['grid_proxy_user'] = '/tmp/x509up_u%s' % gvar['uid']
#   else:
#       gvar['grid_proxy_user'] = None

    # Retrieve arguments.
    gvar['command_args'] = _args(gvar, args[1:])

    # Ensure a minimal user settings exists.
    if not os.path.exists('%s/.csv2' % gvar['home_dir']):
        os.makedirs('%s/.csv2' % gvar['home_dir'], mode=0o700)  
        if gvar['pid_file'] != '-':
            try:
                os.unlink(gvar['pid_file'])
            except:
                pass

    # Retrieve (or initialise) process defaults.
    if os.path.isfile(gvar['pid_file']):
        gvar['pid_defaults_update'] = False
        fd = open(gvar['pid_file'])
        gvar['pid_defaults'] = yaml_full_load(fd.read())
        fd.close()
    else:
        update_pid_defaults(gvar)

    # Save or load the user's server specification.
    if 'server' in gvar['command_args']:
        if os.path.isfile('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['command_args']['server'])) or (gvar['object'] == 'defaults' and gvar['action'] == 'set'):
            update_pid_defaults(gvar, server=gvar['command_args']['server'])
        else:
            if len(os.listdir('%s/.csv2' % gvar['home_dir'])) > 0:
               print('Error: the specified server "%s" does not exist in your defaults.' % gvar['command_args']['server'])
               requests_no_credentials_error(gvar)

    else:
        if gvar['pid_defaults']['server'] == '-' and os.path.isfile('%s/.csv2/default_server' % gvar['home_dir']):
            fd = open('%s/.csv2/default_server' % gvar['home_dir'])
            tmp_server = fd.read()
            fd.close()

            if os.path.isfile('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], tmp_server)):
                update_pid_defaults(gvar, server=tmp_server)

    if gvar['pid_defaults']['server'] == '-':
        if 'server-address' in gvar['command_args']:
            gvar['user_settings'] = {}
        else:
            if not gvar['object'] and not gvar['action'] and (gvar['command_args']['long-help'] or gvar['command_args']['help']):
                gvar['user_settings'] = gvar['command_args']
                gvar['super_user'] = 0
                csv2_help.help(gvar)
            else:
                requests_no_credentials_error(gvar)
    else:
        if os.path.isfile('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['pid_defaults']['server'])):
            fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['pid_defaults']['server']))
            gvar['user_settings'] = yaml_full_load(fd)
            fd.close()
        else:
            gvar['user_settings'] = {}

    # Apply options temporarily.
    for key in gvar['command_args']:
        if isinstance(gvar['command_args'][key], bool):
            if key not in gvar['user_settings']:
                gvar['user_settings'][key] = False
            
            if gvar['command_args'][key]:
                gvar['user_settings'][key] = not gvar['user_settings'][key]
        else:
            if gvar['command_args'][key] == '-':
                if key in gvar['user_settings']:
                    del(gvar['user_settings'][key])
            else:
                gvar['user_settings'][key] = gvar['command_args'][key]

    # If version or expose-API specified, determine and display the client version.
    if gvar['user_settings']['version'] or gvar['user_settings']['expose-API']:
        path_info = sys.path[0].split('/')
        path_info_ix = path_info.index('cloudscheduler')
        cloudscheduler_root_dir = '/'.join(path_info[:path_info_ix+1])

        p1 = Popen([
            'git',
            'log',
            '--decorate'],
            cwd='%s' % gvar['command_dir'], stdout=PIPE, stderr=PIPE)
        p2 = Popen([
            'awk',
            '/^commit /'],
            stdin=p1.stdout, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p2.communicate()
        commits = stdout[:-1].decode('utf-8').split('\n')
        tag_ix = -1
        for ix in range(len(commits)):
            words = commits[ix].replace('(',' ').replace(')',' ').replace(',',' ').split()
            try:
                words_ix = words.index('tag:')
            except:
                words_ix = -1
            if words_ix > -1:
                tag = words[words_ix+1]
                tag_ix = ix
                break

        if tag_ix == -1:
            gvar['client_version'] = 'Build: %d' % len(commits)
        elif tag_ix == 0:
            gvar['client_version'] = 'Version: %s' % tag
        else:
            gvar['client_version'] = 'Version: %s + %d commits' % (tag, tag_ix)
                    
        print("Cloudscheduler CLI, %s\n" % gvar['client_version'])

    # Set non-super_user and no user_groups.
    if gvar['object'] in ['defaults', 'helpers', 'metadata']:
        gvar['super_user'] = False
        gvar['user_groups'] = []

    if gvar['object'] != 'defaults' and gvar['object'] != 'helpers':
        response = requests(gvar, '/settings/prepare/')
        if gvar['user_settings']['version']:
            print("Cloudscheduler server: %s, %s\n" % (gvar['pid_defaults']['server'], response['version']))

    # Call object handler.
    if gvar['object'] in gvar['actions']:
        if not gvar['super_user'] and gvar['actions'][gvar['object']][0]:
            print('Error: You are not authorized to access object "%s"; use "%s -h" or "%s -H" for help.' % (gvar['object'], gvar['command_name'], gvar['command_name']))
            exit(1)

        if gvar['action'] in gvar['actions'][gvar['object']][1]:
            gvar['actions'][gvar['object']][1][gvar['action']](gvar)
        else:
            csv2_help.help(gvar)
            if not gvar['action']:
                print('Error: No action specified for object "%s"; use -h or -H for help.' % gvar['object'])
            else:
                print('Error: Invalid action "%s" for object "%s"; use -h or -H for help.' % (gvar['action'], gvar['object']))
            exit(1)
    else:
        csv2_help.help(gvar)
        if not gvar['object']:
            if not gvar['user_settings']['version']:
                print('Error: No object specified; use -h or -H for help.')
        else:
            print('Error: Invalid object "%s" specified; use -h or -H for help.' % gvar['object'])
        exit(1)
             
def _args(gvar, arg_list):
    """
    Return dictionary of arguments.
    """

    # Initialize response.
    response = {}
    unrecognized = []

    for _ix in range(len(gvar['command_keys'])):
        if gvar['command_keys'][_ix][0] == '-ds':
            gvar['set_default_server'] = False
        else:
            if not gvar['command_keys'][_ix][2]:
                response[gvar['command_keys'][_ix][1][2:]] = False

    # Scan args.
    _max_ix = len(arg_list) - 1
    _skip_next = False
    for _ix in range(len(arg_list)):
        if _skip_next:
            _skip_next = False

        else:
            _recognized = False
            for _iy in range(len(gvar['command_keys'])):
                if gvar['command_keys'][_iy][2] and \
                (arg_list[_ix] == gvar['command_keys'][_iy][0] or \
                arg_list[_ix] == gvar['command_keys'][_iy][1]):
                    if _ix < _max_ix:
                        _recognized = True
                        _skip_next = True
                        response[gvar['command_keys'][_iy][1][2:]] = arg_list[_ix+1]

                    else:
                        print('Error: Value omitted for option: %s | %s' % (gvar['command_keys'][_iy][0], gvar['command_keys'][_iy][1]))
                        exit(1)

                elif not gvar['command_keys'][_iy][2] and \
                (arg_list[_ix] == gvar['command_keys'][_iy][0] or \
                arg_list[_ix] == gvar['command_keys'][_iy][1]):
                    _recognized = True
                    if gvar['command_keys'][_iy][0] == '-ds':
                        gvar['set_default_server'] = True
                    else:
                        response[gvar['command_keys'][_iy][1][2:]] = True

        if not _recognized:
            if not gvar['object']:
                gvar['object'] = arg_list[_ix]
            elif not gvar['action']:
                gvar['action'] = arg_list[_ix]
            else:
                unrecognized.append(arg_list[_ix])

    if unrecognized:
        print('Error: The following command line arguments were unrecognized: %s' % unrecognized)
        exit(1)

    return response 

if __name__ == "__main__":
    main(sys.argv)

