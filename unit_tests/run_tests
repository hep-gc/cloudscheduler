#!/usr/bin/env python3
"""
Unit tests.
"""

from os import listdir, path
from re import sub
from sys import argv
from unit_test_common import initialize_csv2_request

TEST_OBJECTS = ['alias', 'cli', 'cloud', 'db', 'group', 'job', 'server', 'user', 'vm', 'web']

def get_test_list(ut_path):
    test_names = []
    for f in sorted(listdir(ut_path)):
        if f.startswith('test_'):
            test_names.append((f[:-3], sub(r'\d', '', f[5:-3])))
    return test_names

def main():
    # Find the path to the unit test directory
    cmd_path = path.realpath(argv[0]).split('/')
    clo_index = cmd_path.index('cloudscheduler')
    ut_path = '{}/unit_tests'.format('/'.join(cmd_path[:clo_index+1]))

    test_names = get_test_list(ut_path)
    user_options = {
        'setup': True,
        'cleanup': True,
        'hidden': True,
        'run_all': True,
        'tests': [],
        'objects': []
    }

    if len(argv) > 1:
        for arg in argv[1:]:
            if arg in ('-h', '--help'):
                print('Options:')
                print('-ss | --skip-setup\tFlag to specify if unit test setup should be skipped')
                print('-sc | --skip-cleanup\tFlag to specify if unit test cleanup should be skipped')
                print('-v  | --verbose\t\tPrint setup and clean up output')
                print('The valid tests in this folder are:')
                for (_, name) in test_names:
                    print(name)
                exit()
            elif arg in ('-ss', '--skip-setup'):
                user_options['setup'] = False
            elif arg in ('-sc', '--skip-cleanup'):
                user_options['cleanup'] = False
            elif arg in ('-v', '--verbose'):
                user_options['hidden'] = False
            elif arg.startswith('['):
                user_options['run_all_selection'] = arg[1:-1]
            else:
                user_options['run_all'] = False
                if arg.endswith(']'):
                    temp = arg.split('[')
                    selection = temp[1][:-1]
                    obj = temp[0]
                else:
                    obj = arg
                    selection = None
                if obj in TEST_OBJECTS:
                    filtered_tests = [test for test in test_names if test[1].startswith(obj)]
                    for test in filtered_tests:
                        option = (test, {})
                        initialize_csv2_request(option[1], selections=selection)
                        user_options['tests'].append(option)
                    if obj not in user_options['objects']:
                        user_options['objects'].append(obj)
                else:
                    test_found = [i for i, test in enumerate(test_names) if test[1] == obj]
                    if test_found == []:
                        print('No test of the name "{}". Run with the "-h" flag for a list of valid tests'.format(obj))
                        exit()
                    else:
                        option = (test_names[test_found[0]], {})
                        initialize_csv2_request(option[1], selections=selection)
                        user_options['tests'].append(option)
                        for o in TEST_OBJECTS:
                            if obj.startswith(o) and o not in user_options['objects']:
                                user_options['objects'].append(o)

    if user_options['run_all']:
        for test in test_names:
            user_options['tests'].append((test, None))
        user_options['objects'] = TEST_OBJECTS

    hidden_gvar = {}
    initialize_csv2_request(hidden_gvar, hidden=user_options['hidden'])

    gvar = {}
    if 'run_all_selection' in user_options:
        initialize_csv2_request(gvar, selections=user_options['run_all_selection'])
    else:
        initialize_csv2_request(gvar)

    for obj in user_options['objects']:
        if user_options['setup']:
            exec('import {}_requests_setup'.format(obj), globals(), locals())
            print('Setting up {} tests...'.format(obj))
            exec('{}_requests_setup.main(hidden_gvar)'.format(obj), globals(), locals())
        if hidden_gvar['ut_failed'] == 0:
            for ((f, n), s) in user_options['tests']:
                if s is None:
                    if n.startswith(obj):
                        exec('import {}'.format(f), globals(), locals())
                        gvar['ut_count'][1] = 0
                        print('\n*** Testing {} ***\n'.format(n))
                        exec('{}.main(gvar)'.format(f), globals(), locals())
                else:
                    if n.startswith(obj):
                        exec('import {}'.format(f), globals(), locals())
                        print('\n*** Testing {} ***\n'.format(n))
                        exec('{}.main(s)'.format(f), globals(), locals())
        if user_options['cleanup']:
            exec('import {}_requests_cleanup'.format(obj))
            print('Cleaning up {} tests...'.format(obj))
            exec('{}_requests_cleanup.main(hidden_gvar)'.format(obj), globals(), locals())
        if hidden_gvar['ut_failed'] > 0:
            print('Error setting up or cleaning up tests. Run with -v flag to see output.')
            break
            exit(hidden_gvar['ut_failed'])
    if user_options['run_all']:
        print('Test run=%s, skipped=%s, failed=%s.' % (gvar['ut_count'][0]-gvar['ut_skipped'], gvar['ut_skipped'], gvar['ut_failed']))
        exit(gvar['ut_failed'])

    total_failed = 0
    for ((_, n), s) in user_options['tests']:
        print('Test {} run={}, skipped={}, failed={}.'.format(n, s['ut_count'][0]-s['ut_skipped'], s['ut_skipped'], s['ut_failed']))
        total_failed += s['ut_failed']
    exit(total_failed)

if __name__ == '__main__':
    main()
