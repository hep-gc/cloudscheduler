---
# file: install_configure_mariadb.yaml
#
# Depends on the following variables:
#
#   {{ i_internal_connection.0.ipv4 }}
#   {{ i_internal_connection.0.ipv4fqdn }}
#   {{ database_user_passwords['root'] }}
#   {{ database_user_passwords['change_from_old_root'] }}
#
#  and the following optional variables:
#   {{ public_mariadb }}        - Anything other than "true" is treated as "false". 
#   {{ etc_my_cnf_d }}          - A list of configuration files, see play "configure mariadb server" below.

- name: if required (public_mariadb = true specified), open the firewall for public access
  firewalld: service=mysql state=enabled permanent=true immediate=true zone=public
  when:
  - public_mariadb is defined
  - public_mariadb == true
  - (container is undefined) or (container == False)
  ignore_errors: yes

- name: setup the MariaDB repository
  copy:
    src: etc_yum.repos.d_MariaDB.repo
    dest: /etc/yum.repos.d/MariaDB.repo
    owner: root
    group: root
    mode: 0644

- name: install mariadb (MySQL) packages
  yum:
    name: ['expect', 'MariaDB-server', 'MariaDB-client', 'MariaDB-devel', 'MariaDB-compat', 'MariaDB-common',
           'MariaDB-shared', 'zlib-devel', 'openssl-devel', 'MySQL-python', 'python2-PyMySQL']
    state: latest
  notify:
  - restart mariadb

#- name: install pip3 mysqlclient
#  command: pip3 install mysqlclient

# name: configure mariadb server
# template:
#   src: "etc_my.cnf.d_{{ item }}.j2"
#   dest: "/etc/my.cnf.d/{{ item }}"
#   owner: root
#   group: root
#   mode: 0644
# with_items: "{{ etc_my_cnf_d }}"
# notify:
# - restart mariadb
# when:
# - etc_my_cnf_d is defined

- name: ensure mariadb is running and enabled with service
  service: name=mariadb state=restarted enabled=yes
  when: (container is undefined) or (container == False)

- name: ensure mariadb is running and enabled with systemd
  systemd: name=mariadb state=started enabled=yes
  when: 
  - container is defined
  - container == True

- meta: flush_handlers

- name: ensure mysql pid is down
  shell: pkill -9 mysql
  ignore_errors: yes
  when:
  - container is defined
  - container == True

- name: restart mariadb
  systemd:
      name: mariadb
      state: restarted
  when:
  - container is defined
  - container == True

- name: secure mariadb database
  script: expect-mariadb_secure_database "{{ database_user_passwords['root'] }}" "{{ database_user_passwords['change_from_old_root'] }}" creates=/root/ansible_script_logs/expect-mariadb_secure_database.log

- name: allow mariadb admin on internal subnet
  script: bash-mariadb_allow_admin_on_internal_subnet "{{ i_internal_connection.0.ipv4fqdn }}" "{{ database_user_passwords['root'] }}" creates=/root/ansible_script_logs/bash-mariadb_allow_admin_on_internal_subnet.log
