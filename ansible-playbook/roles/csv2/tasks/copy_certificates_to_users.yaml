# copy_certificates_to_users.yaml

- name: create x509 certificate distribution directories
  file:
    dest: "{{ item }}"
    state: directory
    owner: condor
    group: condor
    mode: 0700
  with_items:
  - "/usr/local/etc/certificates"
  - "/usr/local/etc/certificates/{{ ansible_fqdn }}"
  - "/usr/local/etc/certificates/{{ ansible_hostname }}-worker.{{ ansible_domain }}"
  when:
  - htcondor_cert is defined
  - htcondor_key is defined
  - htcondor_worker_cert is defined
  - htcondor_worker_key is defined

- name: install x509 certificates
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: condor
    group: condor
    mode: 0400
  with_items:
  - {src: "{{ htcondor_cert }}", dest: "/usr/local/etc/certificates/{{ ansible_fqdn }}/cert.pem"}
  - {src: "{{ htcondor_worker_cert }}", dest: "/usr/local/etc/certificates/{{ ansible_hostname }}-worker.{{ ansible_domain }}/cert.pem"}
  when:
  - htcondor_cert is defined
  - htcondor_key is defined
  - htcondor_worker_cert is defined
  - htcondor_worker_key is defined

- name: install x509 keys
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: condor
    group: condor
    mode: 0400
  with_items:
  - {src: "{{ htcondor_key }}", dest: "/usr/local/etc/certificates/{{ ansible_fqdn }}/privkey.pem"}
  - {src: "{{ htcondor_worker_key }}", dest: "/usr/local/etc/certificates/{{ ansible_hostname }}-worker.{{ ansible_domain }}/privkey.pem"}
  when:
  - htcondor_cert is defined
  - htcondor_key is defined
  - htcondor_worker_cert is defined
  - htcondor_worker_key is defined

- set_fact:
    certificate_users: []
  when: certificate_users is undefined

- set_fact:
    certificate_users: "{{ certificate_users + [item] }}"
  with_items: "{{ additional_certificate_users }}"
  when: additional_certificate_users is defined

- name: create user certificate directories
  file:
    dest: "{{ item.globus }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0755
  with_items:
  - "{{ certificate_users }}"

- name: create empty usercert pem files for certificate users
  file:
    dest: "{{ item.globus }}/{{ item.pfx }}cert.pem"
    state: touch
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0444
  with_items:
  - "{{ certificate_users }}"

- name: create empty userkey pem files for certificate users
  file:
    dest: "{{ item.globus }}/{{ item.pfx }}key.pem"
    state: touch
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0400
  with_items:
  - "{{ certificate_users }}"

- name: install bash script to update cert and key for certificate users
  template:
    src: usr_local_sbin_copy_certificates_to_users.j2
    dest: /usr/local/sbin/copy_certificates_to_users.sh
    owner: root
    group: root
    mode: 0700
  when:
  - certificate_users is defined

- name: copy certificates to users crontab entry
  copy:
    src: etc_cron.d_copy-certificates-to-users
    dest: /etc/cron.d/copy-certificates-to-users
    owner: root
    group: root
    mode: 0644
  when:
  - certificate_users is defined

- name: copy certificates to users
  command:
    cmd: /usr/local/sbin/copy_certificates_to_users.sh
  when:
  - certificate_users is defined

