- set_fact:
    csv2_host: '{{ i_virtualhosts.0.virtualhost }}'
    ssl_cert_file: "/etc/letsencrypt/live/{{ i_external_connection.0.ipv4fqdn }}/fullchain.pem"
    ssl_key_file: "/etc/letsencrypt/live/{{ i_external_connection.0.ipv4fqdn }}/privkey.pem"
  when: (local_web is undefined) or (local_web == False)

- set_fact:
    csv2_host: localhost
    ssl_cert_file: /local_ssl/localhost.crt
    ssl_key_file: /local_ssl/localhost.key
  when: 
  - local_web is defined
  - local_web == True    

- set_fact:
    ssl_ca_cert_arg: 'SSLCACertificatePath /etc/grid-security/certificates/'
  when: (container is undefined) or (container == False)

- set_fact:
    ssl_ca_cert_arg: 'SSLCACertificateFile /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem'
  when: 
  - container is defined
  - container == True

- set_fact:
    db_hostname: "{{ i_external_connection.0.ipv4fqdn }}"
  when:
  - (db_on_localhost is undefined) or (db_on_localhost != true)

- set_fact:
    public_mariadb: False

- set_fact:
    db_hostname: "localhost"
  when:
  - db_on_localhost is defined
  - db_on_localhost == true

- set_fact:
    htcondor_gsi_dn: "/CN=csv2-sa.heprc.uvic.ca"
  when:
  - htcondor_gsi_dn is undefined

- set_fact:
    htcondor_worker_gsi_dn: "/CN=csv2-sa-worker.heprc.uvic.ca"
  when:
  - htcondor_worker_gsi_dn is undefined

- name: create cloudscheduler user
  user:
    name: cloudscheduler
# register: cloudscheduler_user

- name: change the group ownership of the phpmyadmin directories
  file:
    dest: "{{ item }}"
    state: directory
    group: cloudscheduler
  with_items:
  - /etc/phpMyAdmin
  - /var/lib/php
  - /var/lib/php/session
  when:
  - (install_phpMyAdmin is defined) and (install_phpMyAdmin == True)

- name: change the group ownership of the phpmyadmin configuration file
  file:
    dest: "{{ item }}"
    state: file
    group: cloudscheduler
  with_items:
  - /etc/phpMyAdmin/config.inc.php
  when:
  - (install_phpMyAdmin is defined) and (install_phpMyAdmin == True)

### install software ###########################################################################################################################################

- import_tasks: install_python3_mod_wsgi.yaml

- name: install other prerequisite packages for cloudscheduler
  yum:
    name:
      - libvirt
      - libvirt-devel
      - ca_policy_igtf-classic
      - apr-util-mysql
      - rabbitmq-server
    state: latest

- name: install ansible (still uses python 2.7) module prerequisites
  pip:
    name: ["bcrypt==3.1.4"]

- name: do csv2, web frontend and pollers pip3 installs
  pip:
    name: ["bcrypt==3.1.4", "boto3>=1.9.130", "sqlalchemy", "pika", "python-keystoneclient",
           "python-novaclient", "python-neutronclient", "python-cinderclient", "python-dateutil",
           "pyyaml", "jinja2", "libvirt-python", "py-dateutil", "urllib3", "django-mathfilters",
           "htcondor", "PyMySQL", "psutil", "celery=4.4.6", "python-glanceclient", "django==2.0.5",
           "mysqlclient", "mysql-connector", "django-debug-toolbar"]
    executable: pip3

- name: save any changes in the git repository that we are about to pull down
  git_reposave:
      dest: /opt/cloudscheduler/
  ignore_errors: yes

- name: pull down git repository
  git:
      repo: 'https://github.com/hep-gc/cloudscheduler.git'
      dest: /opt/cloudscheduler/
      force: yes
      update: yes
      version: "{{ cs_git_branch }}"

- name: install ace js code editor
  git:
      repo: 'https://github.com/ajaxorg/ace-builds.git'
      dest: /opt/cloudscheduler/web_frontend/cloudscheduler/csv2/static/ace-builds/
      accept_hostkey: yes
      force: yes
      update: no
      version: master

- name: install plotly js graphing package
  git:
      repo: 'https://github.com/plotly/plotly.js.git'
      dest: /opt/cloudscheduler/web_frontend/cloudscheduler/csv2/static/plotly.js/
      accept_hostkey: yes
      force: yes
      update: no
      version: master      

- name: list old csv2 services
  shell:
    cmd: "ls csv2-*.service || echo"
    chdir: /etc/systemd/system/
  register: old_csv2_services

- name: list current csv2 services
  shell:
    cmd: "for i in $(ls csv2-*.service.afile); do echo ${i::-6}; done"
    chdir: /opt/cloudscheduler/etc/systemd/system/
  register: current_csv2_services

- name: stop and disable obsolete csv2 services
  systemd:
    name: "{{ item }}"
    enabled: no
    state: stopped
  with_items: "{{ old_csv2_services.stdout_lines | difference(current_csv2_services.stdout_lines) }}"

- name: remove obsolete csv2 service files
  file:
    path: "/etc/systemd/system/{{ item }}"
    state: absent
  with_items: "{{ old_csv2_services.stdout_lines | difference(current_csv2_services.stdout_lines) }}"

- name: create/update csv2 service files in systemd directory
  copy:
    remote_src: yes
    src: "/opt/cloudscheduler/etc/systemd/system/{{ item }}.afile"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items: "{{ current_csv2_services.stdout_lines }}"

- name: reload daemons 
  command: systemctl daemon-reload

- name: remove obsolete files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - /etc/condor/config.d/gsi.container
  - /etc/cron.d/copy-letsencrypt-to-users
  - /etc/cron.d/copy_letsencrypt_to_users.sh
  - /etc/cron.d/csv2-copy-certificates-to-users
  - /etc/cron.d/create_condor_proxies
  - /etc/cron.d/csv2-ec2-instance-types
  - /etc/httpd/conf.d/welcome.conf
  - /etc/systemd/system/csv2-glint.service
  - /etc/logrotate.d/cspollers.conf
  - /etc/logrotate.d/csv2-pollers
  - /var/local/cloudscheduler/etc/condor/config.d/htcondor_distinguished_names
  - /var/lib/condor/.globus

- name: fetch cloudscheduler templates
  fetch:
    src: "{{ item }}"
    dest: /tmp/cloudscheduler/
  with_items:
  - '/opt/cloudscheduler/etc/cloudscheduler/cloudscheduler.yaml.j2'
  - '/opt/cloudscheduler/usr/local/etc/haproxy.conf.j2'
  - '/opt/cloudscheduler/etc/httpd/conf.d/csv2_ssl.conf.j2'
  - '/opt/cloudscheduler/web_frontend/cloudscheduler/cloudscheduler_web/settings.py.j2'

### configure amqp #############################################################################################################################################

- name: prerequisite services are enabled and running
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
  - rabbitmq-server

- name: wait for prerequisite services
  wait_for:
  args:
    timeout: 5

- name: define csv2 amqp (rabbitmq) users
  rabbitmq_user:
      user: "{{ item }}"
      password: "new user temporary password"
      vhost: /
      configure_priv: .*
      read_priv: .*
      write_priv: .*
      state: present
  with_items:
  - "{{ amqp_users }}"

- name: update csv2 amqp (rabbitmq) user passwords (cannot make "rabbitmq_user" work with "update_password=always" and "with_items")
  command: "rabbitmqctl change_password {{ item }} {{ amqp_user_passwords[item] }}"
  with_items:
  - "{{ amqp_users }}"

### httpd ######################################################################################################################################################

- name: recreate favicon link.
  file:
    src: "/opt/cloudscheduler/images/cs_{{ favicon_colour }}.ico"
    dest: "/opt/cloudscheduler/web_frontend/cloudscheduler/csv2/static/img/favicon.ico"
    state: link
    force: yes
  notify:
    restart httpd

- name: run apache under the cloudscheduler user
  lineinfile:
    path: "/etc/httpd/conf/httpd.conf"
    regexp: '^User apache'
    line: "User cloudscheduler"
  notify:
    restart httpd

- name: run apache under the cloudscheduler group
  lineinfile:
    path: "/etc/httpd/conf/httpd.conf"
    regexp: '^Group apache'
    line: "Group cloudscheduler"
  notify:
    restart httpd

- name: allow proxy certificates
  copy:
    remote_src: yes
    src: /opt/cloudscheduler/etc/sysconfig/httpd.afile
    dest: /etc/sysconfig/httpd
    owner: root
    group: root
    mode: 0644
  notify:
    restart httpd

- name: set django setttings
  template:
    src: "/tmp/cloudscheduler/{{ ansible_facts.fqdn }}/opt/cloudscheduler/web_frontend/cloudscheduler/cloudscheduler_web/settings.py.j2"
    dest: /opt/cloudscheduler/web_frontend/cloudscheduler/cloudscheduler_web/settings.py
  notify:
    restart httpd

- name: set cloudscheduler apache config
  template:
    src: "/tmp/cloudscheduler/{{ ansible_facts.fqdn }}/opt/cloudscheduler/etc/httpd/conf.d/csv2_ssl.conf.j2"
    dest: /etc/httpd/conf.d/csv2_ssl.conf
  notify:
    restart httpd

- name: open https port
  firewalld:
    service: https
    permanent: true
    state: enabled 
    immediate: true
  when: (container is undefined) or (container == False)
  ignore_errors: yes

### HAProxy ####################################################################################################################################################

- import_tasks: install_CentOS_HAProxy.yaml

- name: install HAProxy service wrapper
  copy:
    remote_src: yes
    src: /opt/cloudscheduler/usr/local/sbin/haproxy_wrapper.afile
    dest: /usr/local/sbin/haproxy_wrapper
    owner: root
    group: root
    mode: 0744
  notify:
    restart httpd

- name: configure HAProxy
  template:
    src: "/tmp/cloudscheduler/{{ ansible_facts.fqdn }}/opt/cloudscheduler/usr/local/etc/haproxy.conf.j2"
    dest: /usr/local/etc/haproxy.conf
    owner: root
    group: root
    mode: 0644
  notify:
      restart httpd

- name: create/update HAProxy service file in systemd directory
  copy:
    remote_src: yes
    src: "/opt/cloudscheduler/etc/systemd/system/{{ item }}.afile"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - HAProxy.service

- name: reload daemons 
  command: systemctl daemon-reload

- name: ensure HAProxy service is enabled and running
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
  - HAProxy.service

### container configuration ####################################################################################################################################

- name: set start condition in default.yaml.j2 for container target
  lineinfile:
    path: /opt/cloudscheduler/default.yaml.j2
    regexp: '^        START = '
    line: '        START = TRUE'
  when: 
  - container is defined
  - container == True
 
- name: Get public IP address
  ipify_facts:
  when: 
  - container is defined
  - container == True

- name: update cloudscheduler to remove ssl verification for private-web container target
  lineinfile:
    path: /opt/cloudscheduler/cli/bin/csv2_common.py
    insertafter: "^            {{ item.req1 }}=\\(gvar\\['user_settings'\\]\\['{{ item.req2 }}'\\]"
    line: '            verify=False,'
  with_items:
    - { req1: 'cert', req2: 'server-grid-cert' }
    - { req1: 'auth', req2: 'server-user' }
  when:
    - container is defined
    - container == True
    - local_web is defined
    - local_web == True  

- name: suppress python requests warning if ssl verification removed from cloudscheduler
  blockinfile:
    path: /opt/cloudscheduler/cli/bin/csv2_common.py  
    insertafter: '^    import requests as py_requests'
    content: |2
          import urllib3
          urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
  when:
    - container is defined
    - container == True
    - local_web is defined
    - local_web == True

- name: set default settings for cloudsheduler command
  command: "cloudscheduler defaults set -s default -su csv2_default -spw {{ csv2_default_password }} -sa {{ csv2_web_address}}"
  when:
    - container is defined
    - container == True
    - local_web is defined
    - local_web == True

- name: ensure mysql pid is down
  shell: pkill -9 mysql
  ignore_errors: yes
  when: 
  - container is defined
  - container == True

### celery #####################################################################################################################################################

- name: create celery log directory
  file:
    state: directory
    path: /var/log/celery
    owner: cloudscheduler
    group: cloudscheduler
    mode: 0775

- name: touch celery log files before run
  file:
    state: touch
    path: "/var/log/celery/w{{ item }}.log"
    owner: cloudscheduler
    group: cloudscheduler
    mode: 0664
  with_sequence: start=1 end=4

- name: create celery run directory
  file:
    state: directory
    path: /var/run/celery
    owner: cloudscheduler
    group: cloudscheduler
    mode: 0775

- name: touch celery pid files before run
  file:
    state: touch
    path: "/var/run/celery/w{{ item }}.pid"
    owner: cloudscheduler
    group: cloudscheduler
    mode: 0664
  with_sequence: start=1 end=4

### cloudscheduler #############################################################################################################################################

- import_tasks: copy_certificates_to_users.yaml
- import_tasks: configure_EL7_HTCondor.yaml

# name: add users to the cloudscheduler group
# user:
#   name: "{{ item }}"
#   groups: cloudscheduler
# with_items:
# - condor

- name: Create cloudscheduler config directory
  file:
      path=/etc/cloudscheduler
      state=directory
      owner=root
      group=cloudscheduler

- name: install cloudscheduler.yaml config file
  template:
    src: "/tmp/cloudscheduler/{{ ansible_facts.fqdn }}/opt/cloudscheduler/etc/cloudscheduler/cloudscheduler.yaml.j2"
    dest: /etc/cloudscheduler/cloudscheduler.yaml
    owner: root
    group: cloudscheduler
    mode: 0640
  notify:
      restart httpd

- name: install celery config
  copy:
    remote_src: yes
    src: "/opt/cloudscheduler/etc/cloudscheduler/{{ item }}.afile"
    dest: "/etc/cloudscheduler/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - celery

- name: create cloudscheduler run time and log directory
  file: 
    path: "{{ item }}"
    owner: cloudscheduler
    group: cloudscheduler
    mode: 0774
    state: directory
  with_items:  
  - /var/local/cloudscheduler/ec2
  - /var/local/cloudscheduler/image_cache
  - /var/local/cloudscheduler/run
  - /var/local/cloudscheduler/schema_backups
  - /var/local/cloudscheduler/signals
  - /var/log/cloudscheduler

- name: create empty cloudscheduler log files (owner=cloudscheduler, group=cloudscheduler)
  file:
      path: "/var/log/cloudscheduler/{{ item }}"
      owner: cloudscheduler
      group: cloudscheduler
      mode: 0644
      state: touch
  with_items:
      - csv2_web.log
      - ec2Poller.log
      - main.log
      - openstackpoller.log
#     - condor_poller.log
      - timeseriesPoller.log
      - watch_csv2.logging

- name: create empty cloudscheduler log files (owner=root, group=root)
  file:
      path: "/var/log/cloudscheduler/{{ item }}"
      owner: root
      group: root
      mode: 0644
      state: touch
  with_items:
  - vm_data.logging

- name: copy logrotate files
  copy:
    remote_src: yes
    src: "/opt/cloudscheduler/etc/logrotate.d/{{ item }}.afile"
    dest: "/etc/logrotate.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - csv2-condor
  - csv2-csv2-web
  - csv2-ec2
  - csv2-main
  - csv2-openstack
  - csv2-vm-data


- name: install csv2 sudoers
  copy:
    remote_src: yes
    src: "/opt/cloudscheduler/etc/sudoers.d/{{ item }}.afile"
    dest: "/etc/sudoers.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - cloudscheduler
    - condor

- name: ensure csv2 services are stopped
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: stopped
  with_items: "{{ current_csv2_services.stdout_lines }}"

- name: configure mariadb server
  copy:
    remote_src: yes
    src: /opt/cloudscheduler/etc/my.cnf.d/server.cnf.afile
    dest: /etc/my.cnf.d/server.cnf
    owner: root
    group: root
    mode: 0644

- name: ensure mariadb is running
  systemd:
      name: mariadb
      state: restarted

- name: install csv2 database schema
  command: "/opt/cloudscheduler/utilities/db_upgrade {{ schema_model }} -i {{ db_upgrade_file }} -r live"
  register: db_upgrade

- name: retrieve privileges for remote users
  command: "/opt/cloudscheduler/utilities/mysql_privileges {{ item.0 }},{{ item.1 }} {{ item.2 }}"
  register: "mysql_privileges"
  with_list: "{{ remote_database_users }}"

- set_fact:
    stderr_lines: []
  when: mysql_privileges is defined

- set_fact:
    stderr_lines: "{{ stderr_lines + item.stderr_lines }}"
  with_items: "{{ mysql_privileges.results }}"
  when: mysql_privileges is defined

- debug:
    msg: "{{ item }}"
  with_nested: "{{ stderr_lines }}"
  when: mysql_privileges is defined

- set_fact:
    stdout_lines: []
  when: mysql_privileges is defined

- set_fact:
    stdout_lines: "{{ stdout_lines + item.stdout_lines }}"
  with_items: "{{ mysql_privileges.results }}"
  when: mysql_privileges is defined

- name: define csv2 database remote users and priveleges
  command: "mysql -u root -p'{{ database_user_passwords['root'] }}' -e '{{ item }}' csv2"
  with_items: "{{ stdout_lines }}"
  when: mysql_privileges is defined

- name: generate schema
  command: /opt/cloudscheduler/utilities/generate_schema.py
  notify: restart httpd

- set_fact:
    csv2_default_password: '{{ csv2_default_password }}'
  when: (container is undefined) or (container == False)

- set_fact: 
    condor_manager: '{{ inventory_instance }}.heprc.uvic.ca'

- set_fact:
    csv2_web_address: "https://{{ inventory_instance }}.heprc.uvic.ca"
  when: (local_web is undefined) or (local_web == False)

- set_fact:
    csv2_web_address: https://localhost
  when: 
    - container is defined
    - container == True
    - local_web is defined
    - local_web == True
    - (running_condor is undefined) or (running_condor == True)

- set_fact:
    csv2_web_address: https://localhost
  when:
    - container is defined
    - container == True
    - local_web is defined
    - local_web == True
    - running_condor is defined
    - running_condor == False

- name: encrypt the default user password
  blowfish:
    password: "{{ csv2_default_password }}"

- name: create csv2_default user for csv2
  command: mysql -u root --password="{{ database_user_passwords['root'] }}" -D csv2 -e 'INSERT INTO csv2_user (username, password, is_superuser, join_date) VALUES ("csv2_default", "{{ blowfish.hash }}", 1, "2018-04-01")'
  ignore_errors: yes

- name: create csv2-group for the default csv2 user
  command: mysql -u root --password="{{ database_user_passwords['root'] }}" -D csv2 -e 'INSERT INTO csv2_groups (group_name, htcondor_fqdn) VALUES ("csv2-group", "{{ condor_manager }}")'
  ignore_errors: yes

- name: add default csv2 user to csv2-group
  command: mysql -u root --password="{{ database_user_passwords['root'] }}" -D csv2 -e 'INSERT INTO csv2_user_groups (username, group_name) VALUES ("csv2_default", "csv2-group")'
  ignore_errors: yes

- name: create a defaults entry for csv2-group
  command: mysql -u root --password="{{ database_user_passwords['root'] }}" -D csv2 -e 'INSERT INTO csv2_groups (group_name, job_cpus, job_ram, job_disk, job_scratch, job_swap, vm_keep_alive) VALUES ("csv2-group", "1", "1000", "5", "0", "0", "0")'
  ignore_errors: yes

- name: add metadata files for csv2-group
  command: mysql -u root --password="{{ database_user_passwords['root'] }}" -D csv2 -e 'INSERT INTO csv2_group_metadata (group_name, metadata_name, enabled, priority, metadata, mime_type) VALUES ("csv2-group", "{{ item }}", "1", "0", LOAD_FILE("/opt/cloudscheduler/metadata/{{ item }}"), "cloud-config")'
  ignore_errors: yes
  with_items:
  - csv2htc.yaml.j2
  - default.yaml.j2

- name: copy csv2 crontab entries
  copy:
    remote_src: yes
    src: "/opt/cloudscheduler/etc/cron.d/{{ item }}.afile"
    dest: "/etc/cron.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - csv2-signal-log-cleanup
  - csv2-watch

- name: make a soft link to the cloudscheduler executable
  file:
    src: "/opt/cloudscheduler/cli/bin/cloudscheduler"
    dest: /usr/bin/cloudscheduler
    state: link

- name: ensure csv2 services are enabled and running
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items: "{{ current_csv2_services.stdout_lines }}"

- meta: flush_handlers

