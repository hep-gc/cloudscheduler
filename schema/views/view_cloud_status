/*
** List all group resources (clouds) with VM & resource counts.
create or replace view view_t2 as
*/
create or replace view view_cloud_status as

select
    cc.*,
    ifnull(cs.slot_count, 0) as slot_count,
    ifnull(cs.slot_core_count, 0) as slot_core_count,
    ifnull(cs.slot_idle_core_count, 0) as slot_idle_core_count,
    ifnull(vfr.count,0) as Foreign_VMs,
    enabled,
    freeze,
    communication_up,
    communication_rt,
    cores_ctl,

    case when cores_ctl=-1 then
        case when cores_softmax=-1 then
            ifnull(cores_max,0)
        else
            least(cores_softmax, ifnull(cores_max,0))
        end
    else
        case when cores_softmax=-1 then
            least(cores_ctl, ifnull(cores_max,0))
        else
            least(cores_ctl, cores_softmax, ifnull(cores_max,0))
        end
    end as cores_limit,

    ifnull(cl.instances_max,0) as VMs_quota,
    VMs+ifnull(vfr.count,0) as VMs_native_foreign,

    ifnull(cl.cores_max,0) as cores_quota,
    cores_softmax as cores_soft_quota,
    ifnull(vfr.cores,0) as cores_foreign,
    ifnull(cc.cores_native,0)+ifnull(vfr.cores,0) as cores_native_foreign,
    ram_ctl,

    case when ram_ctl=-1 then
        ifnull(ram_max,0)
    else
        least(ram_ctl, ifnull(ram_max,0))
    end as ram_limit,

    ifnull(cl.ram_max,0) as ram_quota,
    ifnull(vfr.ram,0) as ram_foreign,
    ifnull(cc.ram_native,0)+ifnull(vfr.ram,0) as ram_native_foreign,
    ifnull(cl.volume_gigs_max,0) as volume_gigs_max,
    ifnull(cl.volume_gigs_used,0) as volume_gigs_used
from (
    select
        cc.group_name,
        cc.cloud_name,
        cc.app_credentials_expiry,
        sum(VMs) as VMs,

        sum(case when cc.poller_status='manual'       then VMs else 0 end) as VMs_manual,
        sum(case when cc.poller_status='error'        then VMs else 0 end) as VMs_in_error,
        sum(case when cc.poller_status='starting'     then VMs else 0 end) as VMs_starting,
        sum(case when cc.poller_status='retiring'     then VMs else 0 end) as VMs_retiring,
        sum(case when cc.poller_status='unregistered' then VMs else 0 end) as VMs_unregistered,
        sum(case when cc.poller_status='idle'         then VMs else 0 end) as VMs_idle,
        sum(case when cc.poller_status='running'      then VMs else 0 end) as VMs_running,

        case when ei.instance_type is null then
            ifnull(sum(cf.cores*VMs), 0)
        else
            ifnull(sum(ei.cores*VMs), 0)
        end as cores_native,

        case when ei.instance_type is null then
            ifnull(sum(cf.ram * VMs), 0)
        else
            ifnull(sum(ei.memory * 1024 * VMs), 0)
        end as ram_native

    from (
        select
            group_name,
            cloud_name,
            region,
            flavor_id,
            poller_status,
            app_credentials_expiry,
            sum(VMs) as VMs
        from (
            select
                group_name,
                cloud_name,
                'dummy' as region,
                'dummy' as flavor_id,
                'dummy' as poller_status,
                app_credentials_expiry,
                0 as VMs
            from csv2_clouds
            union all select
                group_name,
                cloud_name,
                region,
                flavor_id,
                case when manual_control = 1 then
                    'manual'
                else
                    case when status = 'ERROR' then
                        'error'
                    else
                        case when retire > 0 then
                            'retiring'
                        else
                            case when status = 'BUILD' then
                                'starting'
                            else
                                case when status = 'ACTIVE' and htcondor_partitionable_slots is null then
                                    'unregistered'
                                else
                                    case when status = 'ACTIVE' and ifnull(htcondor_dynamic_slots,0) < 1 then
                                        'idle'
                                    else
                                        case when status = 'ACTIVE' and ifnull(htcondor_dynamic_slots,0) > 0 then
                                            'running'
                                        else
                                            'error'
                                        end
                                    end
                                end
                            end
                        end
                    end
                end as poller_status,
                NULL as app_credentials_expiry,
                1 as VMs
            from csv2_vms
        ) as cv
        group by 
            group_name,
            cloud_name,
            region,
            flavor_id,
            poller_status
    ) as cc
    left outer join cloud_flavors as cf on
        cc.group_name=cf.group_name and
        cc.cloud_name=cf.cloud_name and
        cc.flavor_id=cf.id
    left outer join ec2_instance_types as ei on
        cc.region=ei.region and
        cc.flavor_id=ei.instance_type
    group by
        cc.group_name,
        cc.cloud_name
) as cc
left outer join (
    select
        group_name,
        cloud_name,
        sum(case when slot_type='Dynamic' then 1 else 0 end) as slot_count,
        sum(case when slot_type='Dynamic' and state='Claimed' then slot_cpus else 0 end) as slot_core_count,
        sum(case when state!='Claimed' then slot_cpus else 0 end) as slot_idle_core_count
    from condor_machines as cm, (select config_value as csv2_host_id from csv2_configuration where category='SQL' and config_key='csv2_host_id') as cnf
    where condor_host=csv2_host_id
    group by
        group_name,
        cloud_name
) as cs on
    cc.group_name=cs.group_name and
    cc.cloud_name=cs.cloud_name 
left outer join view_foreign_resources as vfr on
    cc.group_name=vfr.group_name and
    cc.cloud_name=vfr.cloud_name
left outer join csv2_clouds as cc2 on
    cc.group_name=cc2.group_name and
    cc.cloud_name=cc2.cloud_name
left outer join cloud_limits as cl on
    cc.group_name=cl.group_name and
    cc.cloud_name=cl.cloud_name
;

