/*
** List group/cloud/flavors in flavor priority order and for each group/cloud/flavor
** combination show the number of VMs up and down.
*/
create or replace view view_available_resources as
/* fwdac - flavors with defaults and counts */
select
fwd.group_name,
fwd.cloud_name,
fwd.priority as cloud_priority,
fwd.region,
fwd.cloud_type,
fwd.htcondor_fqdn,
fwd.htcondor_container_hostname,
fwd.htcondor_other_submitters,
fwd.vm_boot_volume,
fwd.spot_price,
fwd.authurl,
fwd.cacertificate,
fwd.project_domain_name,
ifnull(fwd.project_domain_id, '') as project_domain_id,
fwd.project,
fwd.user_domain_name,
ifnull(fwd.user_domain_id, '') as user_domain_id,
fwd.username,
fwd.password,
fwd.default_flavor,
fwd.default_image,
fwd.default_keep_alive,
fwd.default_keyname,
fwd.default_network,
fwd.default_security_groups,
ifnull(ru.VMs,0) as VMs,
ifnull(fwd.VMs_max,0) as VMs_max,
ifnull(fwd.cores_ctl,0) as cores_ctl,
ifnull(fwd.cores_softmax,0) as cores_softmax,
ifnull(fwd.cores_limit,0) as cores_limit,
ifnull(fwd.cores_max,0) as cores_max,
ifnull(ru.cores_used,0) as cores_used,
ifnull(fwd.cores_foreign,0) as cores_foreign,
ifnull(ru.disk_used,0) as disk_used,
ifnull(fwd.ram_ctl,0) as ram_ctl,
ifnull(fwd.ram_max,0) as ram_max,
ifnull(fwd.ram_limit,0) as ram_limit,
ifnull(ru.ram_used,0) as ram_used,
ifnull(fwd.ram_foreign,0) as ram_foreign,
ifnull(ru.swap_used,0) as swap_used,
fwd.flavor,
fwd.flavor_id,
fwd.volumes_max,
fwd.volumes_used,
fwd.volume_gigs_max,
fwd.volume_gigs_used,

case when ifnull(fwd.VMs_max,0)>ifnull(ru.VMs,0) and ifnull(fwd.cores_limit,0)>ifnull(ru.cores_used,0) and ifnull(fwd.ram_limit,0)>ifnull(ru.ram_used,0) then
    least((fwd.cores_limit-ifnull(ru.cores_used,0)) div fwd.flavor_cores, (fwd.ram_limit-ifnull(ru.ram_used,0)) div fwd.flavor_ram)
else
    0
end as flavor_slots,

fwd.flavor_cores,
fwd.flavor_disk,
fwd.flavor_ram,
fwd.flavor_swap,
fwd.auth_type,
fwd.app_credentials,
fwd.app_credentials_secret,
ifnull(fru.flavor_VMs,0) as flavor_VMs,
ifnull(fru.flavor_starting,0) as flavor_starting,
ifnull(fru.flavor_unregistered,0) as flavor_unregistered,
ifnull(fru.flavor_idle,0) as flavor_idle,
ifnull(fru.flavor_running,0) as flavor_running,
ifnull(fru.flavor_retiring,0) as flavor_retiring,
ifnull(fru.flavor_error,0) as flavor_error,
ifnull(fru.flavor_manual,0) as flavor_manual,
fru.updater,
ifnull(fwd.worker_cert,"None") as worker_cert,
ifnull(fwd.worker_key, "None") as worker_key

from (
    /* fwd - flavors with defaults */
    select
        cwd.*,
        concat(cf1.cloud_name, ':', cf1.name) as flavor,
        cf1.id as flavor_id,
        cf1.cores as flavor_cores,
        cf1.disk + cf1.ephemeral_disk as flavor_disk,
        cf1.ram as flavor_ram,
        cf1.swap as flavor_swap
    from (
        /* cwd - cloud with defaults */
        select
            cc.*,
            cg.htcondor_fqdn,
            cg.htcondor_container_hostname,
            cg.htcondor_other_submitters,
            cl.volumes_max,
            cl.volumes_used,
            cl.volume_gigs_max,
            cl.volume_gigs_used,


            case when ifnull(cc.vm_flavor,'')!='' then
                concat(cc.cloud_name, ':', cc.vm_flavor)
            else
                case when ifnull(cg.vm_flavor,'')!='' then
                    concat(cc.cloud_name, ':', cg.vm_flavor)
                else
                    null
                end
            end as default_flavor,

            case when ifnull(cc.vm_image,'')!='' then
                cc.vm_image
            else
                case when ifnull(cg.vm_image,'')!='' then
                    cg.vm_image
                else
                    null
                end
            end as default_image,

            case when ifnull(cc.vm_keep_alive,-1)!=-1 then
                cc.vm_keep_alive
            else
                case when ifnull(cg.vm_keep_alive,-1)!=-1 then
                    cg.vm_keep_alive
                else
                    0
                end
            end as default_keep_alive,

            case when ifnull(cc.vm_keyname,'')!='' then
                cc.vm_keyname
            else
                case when ifnull(cg.vm_keyname,'')!='' then
                    cg.vm_keyname
                else
                    null
                end
            end as default_keyname,

            case when ifnull(cc.vm_network,'')!='' then
                cc.vm_network
            else
                case when ifnull(cg.vm_network,'')!='' then
                    cg.vm_network
                else
                    null
                end
            end as default_network,

            case when ifnull(cc.vm_security_groups,'')!='' then
                cc.vm_security_groups
            else
                case when ifnull(cg.vm_security_groups,'')!='' then
                    cg.vm_security_groups
                else
                    null
                end
            end as default_security_groups,

            instances_max as VMs_max, 

#           cores_ctl,
#           cores_softmax,
            cores_max,
            case when ifnull(cores_ctl,-1)!=-1 then
                case when ifnull(cores_softmax,-1)!=-1 then
                    least(cores_ctl, cores_softmax-ifnull(vfr.cores,0), cores_max-ifnull(vfr.cores,0))
                else
                    least(cores_ctl, cores_max-ifnull(vfr.cores,0))
                end
            else
                case when ifnull(cores_softmax,-1)!=-1 then
                    least(cores_softmax-ifnull(vfr.cores,0), cores_max-ifnull(vfr.cores,0))
                else
                    cores_max-ifnull(vfr.cores,0)
                end
            end as cores_limit,

            vfr.cores as cores_foreign,

#           ram_ctl,
            ram_max,
            case when ifnull(ram_ctl,-1)!=-1 then
                least(ram_ctl, ram_max-ifnull(vfr.ram,0))
            else
                ram_max-ifnull(vfr.ram,0)
            end as ram_limit,

            vfr.ram as ram_foreign,
            cw.worker_cert,
            cw.worker_key

        from csv2_clouds as cc
        left outer join csv2_groups as cg on
            cc.group_name=cg.group_name
        left outer join cloud_limits as cl on
            cc.group_name=cl.group_name and
            cc.cloud_name=cl.cloud_name
        left outer join view_foreign_resources as vfr on
            cc.group_name=vfr.group_name and
            cc.cloud_name=vfr.cloud_name
        left outer join condor_worker_gsi as cw on
            cg.htcondor_fqdn=cw.htcondor_fqdn or
            cg.htcondor_container_hostname=cw.htcondor_fqdn
        join csv2_configuration as gsi on
            gsi.category='GSI' and
            gsi.config_key='cert_days_left_bad'
        where
            enabled=1 and
            communication_up > 0 and
            (cg.htcondor_gsi_dn is null or (cg.htcondor_gsi_eol-unix_timestamp()) div 86400>gsi.config_value) and
            (cw.worker_dn is null or (cw.worker_eol-unix_timestamp()) div 86400>gsi.config_value)
        ) as cwd
    join cloud_flavors as cf1 on
        cwd.group_name=cf1.group_name and
        cwd.cloud_name=cf1.cloud_name
    left outer join csv2_cloud_flavor_exclusions as ccfe on
        cf1.group_name=ccfe.group_name and
        cf1.cloud_name=ccfe.cloud_name and
        cf1.name=ccfe.flavor_name
    where
        ccfe.flavor_name is null
    ) as fwd
left outer join (
    /* ru - Resources used */
    select
        cv.group_name,
        cv.cloud_name,
        sum(1) as VMs,
        sum(cores) as cores_used,
        sum(disk+ephemeral_disk) as disk_used,
        sum(ram) as ram_used,
        sum(swap) as swap_used
    from csv2_vms as cv
    left outer join cloud_flavors as cf on
        cv.group_name=cf.group_name and
        cv.cloud_name=cf.cloud_name and
        cv.flavor_id=cf.id
    group by
        cv.group_name,
        cv.cloud_name
    ) as ru on
    fwd.group_name=ru.group_name and
    fwd.cloud_name=ru.cloud_name
left outer join (
    /* fru - Flavor resources used */
    select
        cv2.group_name,
        cv2.cloud_name,
        cv2.flavor_id,
        sum(cv2.VMs) as flavor_VMs,
        sum(case when cv2.poller_status='starting'     then 1 else 0 end) as flavor_starting,
        sum(case when cv2.poller_status='unregistered' then 1 else 0 end) as flavor_unregistered,
        sum(case when cv2.poller_status='idle'         then 1 else 0 end) as flavor_idle,
        sum(case when cv2.poller_status='running'      then 1 else 0 end) as flavor_running,
        sum(case when cv2.poller_status='retiring'     then 1 else 0 end) as flavor_retiring,
        sum(case when cv2.poller_status='error'        then 1 else 0 end) as flavor_error,
        sum(case when cv2.poller_status='manual'       then 1 else 0 end) as flavor_manual,
        group_concat(distinct updater order by updater) as updater
    from (
        select
            *,
            1 as VMs,
            case when manual_control = 1 then
                'manual'
            else
                case when status = 'ERROR' then
                    'error'
                else
                    case when retire > 0 then
                        'retiring'
                    else
                        case when status = 'BUILD' then
                            'starting'
                        else
                            case when status = 'ACTIVE' and htcondor_partitionable_slots is null then
                                'unregistered'
                            else
                                case when status = 'ACTIVE' and ifnull(htcondor_dynamic_slots,0) < 1 then
                                    'idle'
                                else
                                    case when status = 'ACTIVE' and ifnull(htcondor_dynamic_slots,0) > 0 then
                                        'running'
                                    else
                                        'error'
                                    end
                                end
                            end
                        end
                    end
                end
            end as poller_status
        from csv2_vms
        ) as cv2
    group by
        cv2.group_name,
        cv2.cloud_name,
        cv2.flavor_id
    ) as fru on
    fwd.group_name=fru.group_name and
    fwd.cloud_name=fru.cloud_name and
    fwd.flavor_id=fru.flavor_id
;
